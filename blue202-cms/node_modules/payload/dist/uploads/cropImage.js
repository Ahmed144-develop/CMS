"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cropImage: function() {
        return cropImage;
    },
    percentToPixel: function() {
        return percentToPixel;
    }
});
const _sharp = /*#__PURE__*/ _interop_require_default(require("sharp"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const percentToPixel = (value, dimension)=>{
    if (!value) return 0;
    return Math.floor(parseFloat(value) / 100 * dimension);
};
async function cropImage({ cropData, dimensions, file, heightInPixels, widthInPixels }) {
    try {
        const { x, y } = cropData;
        const fileIsAnimatedType = [
            'image/avif',
            'image/gif',
            'image/webp'
        ].includes(file.mimetype);
        const sharpOptions = {};
        if (fileIsAnimatedType) sharpOptions.animated = true;
        const formattedCropData = {
            height: Number(heightInPixels),
            left: percentToPixel(x, dimensions.width),
            top: percentToPixel(y, dimensions.height),
            width: Number(widthInPixels)
        };
        const cropped = (0, _sharp.default)(file.tempFilePath || file.data, sharpOptions).extract(formattedCropData);
        return await cropped.toBuffer({
            resolveWithObject: true
        });
    } catch (error) {
        console.error(`Error cropping image:`, error);
        throw error;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91cGxvYWRzL2Nyb3BJbWFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFVwbG9hZGVkRmlsZSB9IGZyb20gJ2V4cHJlc3MtZmlsZXVwbG9hZCdcbmltcG9ydCB0eXBlIHsgU2hhcnBPcHRpb25zIH0gZnJvbSAnc2hhcnAnXG5cbmltcG9ydCBzaGFycCBmcm9tICdzaGFycCdcblxuaW1wb3J0IHR5cGUgeyBVcGxvYWRFZGl0cyB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBwZXJjZW50VG9QaXhlbCA9ICh2YWx1ZSwgZGltZW5zaW9uKTogbnVtYmVyID0+IHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIDBcbiAgcmV0dXJuIE1hdGguZmxvb3IoKHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwKSAqIGRpbWVuc2lvbilcbn1cblxudHlwZSBDcm9wSW1hZ2VBcmdzID0ge1xuICBjcm9wRGF0YTogVXBsb2FkRWRpdHNbJ2Nyb3AnXVxuICBkaW1lbnNpb25zOiB7IGhlaWdodDogbnVtYmVyOyB3aWR0aDogbnVtYmVyIH1cbiAgZmlsZTogVXBsb2FkZWRGaWxlXG4gIGhlaWdodEluUGl4ZWxzOiBudW1iZXJcbiAgd2lkdGhJblBpeGVsczogbnVtYmVyXG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JvcEltYWdlKHtcbiAgY3JvcERhdGEsXG4gIGRpbWVuc2lvbnMsXG4gIGZpbGUsXG4gIGhlaWdodEluUGl4ZWxzLFxuICB3aWR0aEluUGl4ZWxzLFxufTogQ3JvcEltYWdlQXJncykge1xuICB0cnkge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gY3JvcERhdGFcblxuICAgIGNvbnN0IGZpbGVJc0FuaW1hdGVkVHlwZSA9IFsnaW1hZ2UvYXZpZicsICdpbWFnZS9naWYnLCAnaW1hZ2Uvd2VicCddLmluY2x1ZGVzKGZpbGUubWltZXR5cGUpXG5cbiAgICBjb25zdCBzaGFycE9wdGlvbnM6IFNoYXJwT3B0aW9ucyA9IHt9XG5cbiAgICBpZiAoZmlsZUlzQW5pbWF0ZWRUeXBlKSBzaGFycE9wdGlvbnMuYW5pbWF0ZWQgPSB0cnVlXG5cbiAgICBjb25zdCBmb3JtYXR0ZWRDcm9wRGF0YSA9IHtcbiAgICAgIGhlaWdodDogTnVtYmVyKGhlaWdodEluUGl4ZWxzKSxcbiAgICAgIGxlZnQ6IHBlcmNlbnRUb1BpeGVsKHgsIGRpbWVuc2lvbnMud2lkdGgpLFxuICAgICAgdG9wOiBwZXJjZW50VG9QaXhlbCh5LCBkaW1lbnNpb25zLmhlaWdodCksXG4gICAgICB3aWR0aDogTnVtYmVyKHdpZHRoSW5QaXhlbHMpLFxuICAgIH1cblxuICAgIGNvbnN0IGNyb3BwZWQgPSBzaGFycChmaWxlLnRlbXBGaWxlUGF0aCB8fCBmaWxlLmRhdGEsIHNoYXJwT3B0aW9ucykuZXh0cmFjdChmb3JtYXR0ZWRDcm9wRGF0YSlcblxuICAgIHJldHVybiBhd2FpdCBjcm9wcGVkLnRvQnVmZmVyKHtcbiAgICAgIHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlLFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgY3JvcHBpbmcgaW1hZ2U6YCwgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNyb3BJbWFnZSIsInBlcmNlbnRUb1BpeGVsIiwidmFsdWUiLCJkaW1lbnNpb24iLCJNYXRoIiwiZmxvb3IiLCJwYXJzZUZsb2F0IiwiY3JvcERhdGEiLCJkaW1lbnNpb25zIiwiZmlsZSIsImhlaWdodEluUGl4ZWxzIiwid2lkdGhJblBpeGVscyIsIngiLCJ5IiwiZmlsZUlzQW5pbWF0ZWRUeXBlIiwiaW5jbHVkZXMiLCJtaW1ldHlwZSIsInNoYXJwT3B0aW9ucyIsImFuaW1hdGVkIiwiZm9ybWF0dGVkQ3JvcERhdGEiLCJoZWlnaHQiLCJOdW1iZXIiLCJsZWZ0Iiwid2lkdGgiLCJ0b3AiLCJjcm9wcGVkIiwic2hhcnAiLCJ0ZW1wRmlsZVBhdGgiLCJkYXRhIiwiZXh0cmFjdCIsInRvQnVmZmVyIiwicmVzb2x2ZVdpdGhPYmplY3QiLCJlcnJvciIsImNvbnNvbGUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFtQnNCQSxTQUFTO2VBQVRBOztJQVpUQyxjQUFjO2VBQWRBOzs7OERBSks7Ozs7OztBQUlYLE1BQU1BLGlCQUFpQixDQUFDQyxPQUFPQztJQUNwQyxJQUFJLENBQUNELE9BQU8sT0FBTztJQUNuQixPQUFPRSxLQUFLQyxLQUFLLENBQUMsQUFBQ0MsV0FBV0osU0FBUyxNQUFPQztBQUNoRDtBQVNPLGVBQWVILFVBQVUsRUFDOUJPLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxJQUFJLEVBQ0pDLGNBQWMsRUFDZEMsYUFBYSxFQUNDO0lBQ2QsSUFBSTtRQUNGLE1BQU0sRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUUsR0FBR047UUFFakIsTUFBTU8scUJBQXFCO1lBQUM7WUFBYztZQUFhO1NBQWEsQ0FBQ0MsUUFBUSxDQUFDTixLQUFLTyxRQUFRO1FBRTNGLE1BQU1DLGVBQTZCLENBQUM7UUFFcEMsSUFBSUgsb0JBQW9CRyxhQUFhQyxRQUFRLEdBQUc7UUFFaEQsTUFBTUMsb0JBQW9CO1lBQ3hCQyxRQUFRQyxPQUFPWDtZQUNmWSxNQUFNckIsZUFBZVcsR0FBR0osV0FBV2UsS0FBSztZQUN4Q0MsS0FBS3ZCLGVBQWVZLEdBQUdMLFdBQVdZLE1BQU07WUFDeENHLE9BQU9GLE9BQU9WO1FBQ2hCO1FBRUEsTUFBTWMsVUFBVUMsSUFBQUEsY0FBSyxFQUFDakIsS0FBS2tCLFlBQVksSUFBSWxCLEtBQUttQixJQUFJLEVBQUVYLGNBQWNZLE9BQU8sQ0FBQ1Y7UUFFNUUsT0FBTyxNQUFNTSxRQUFRSyxRQUFRLENBQUM7WUFDNUJDLG1CQUFtQjtRQUNyQjtJQUNGLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFQTtRQUN2QyxNQUFNQTtJQUNSO0FBQ0YifQ==